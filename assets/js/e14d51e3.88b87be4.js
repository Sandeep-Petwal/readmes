"use strict";(self.webpackChunkreadmes=self.webpackChunkreadmes||[]).push([[367],{1780:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Backend/socket.io","title":"Socket.io with JWT Authentication - Complete Guide","description":"Comprehensive guide to implementing secure WebSocket connections using Socket.io with JWT authentication in React and Node.js applications.","source":"@site/docs/Backend/socket.io.md","sourceDirName":"Backend","slug":"/Backend/socket.io","permalink":"/readmes/docs/Backend/socket.io","draft":false,"unlisted":false,"editUrl":"https://github.com/Sandeep-Petwal/readmes/tree/main/packages/create-docusaurus/templates/shared/docs/Backend/socket.io.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Socket.io","title":"Socket.io with JWT Authentication - Complete Guide","description":"Comprehensive guide to implementing secure WebSocket connections using Socket.io with JWT authentication in React and Node.js applications."},"sidebar":"tutorialSidebar","previous":{"title":"Google Auth","permalink":"/readmes/docs/Backend/googleAuth"},"next":{"title":"Docker","permalink":"/readmes/docs/Docker"}}');var s=r(4848),o=r(8453);const i={sidebar_label:"Socket.io",title:"Socket.io with JWT Authentication - Complete Guide",description:"Comprehensive guide to implementing secure WebSocket connections using Socket.io with JWT authentication in React and Node.js applications."},c="WebSocket Authentication with JWT - Step by Step Guide",a={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Server-Side Implementation",id:"server-side-implementation",level:2},{value:"Step 1: Setup Express and Socket.IO Server",id:"step-1-setup-express-and-socketio-server",level:3},{value:"Step 2: Implement Authentication Middleware",id:"step-2-implement-authentication-middleware",level:3},{value:"Step 3: Handle Socket Connections",id:"step-3-handle-socket-connections",level:3},{value:"Client-Side Implementation",id:"client-side-implementation",level:2},{value:"Step 1: Create Socket Hook",id:"step-1-create-socket-hook",level:3},{value:"Step 2: Use Socket in Components",id:"step-2-use-socket-in-components",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Room-Based Authorization",id:"room-based-authorization",level:3},{value:"Custom Events",id:"custom-events",level:3},{value:"Recap",id:"recap",level:2},{value:"Sample file",id:"sample-file",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"websocket-authentication-with-jwt---step-by-step-guide",children:"WebSocket Authentication with JWT - Step by Step Guide"})}),"\n",(0,s.jsx)(n.p,{children:"A comprehensive guide to implementing secure WebSocket connections using JWT authentication in a React and Node.js application."}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#prerequisites",children:"Prerequisites"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#server-side-implementation",children:"Server-Side Implementation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#client-side-implementation",children:"Client-Side Implementation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#usage-examples",children:"Usage Examples"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Server dependencies\r\nnpm install express socket.io jsonwebtoken\r\n\r\n# Client dependencies\r\nnpm install socket.io-client\n"})}),"\n",(0,s.jsx)(n.h2,{id:"server-side-implementation",children:"Server-Side Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-setup-express-and-socketio-server",children:"Step 1: Setup Express and Socket.IO Server"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const express = require('express');\r\nconst http = require('http');\r\nconst { Server } = require('socket.io');\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: \"http://localhost:3000\",\r\n    methods: [\"GET\", \"POST\"]\r\n  }\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-implement-authentication-middleware",children:"Step 2: Implement Authentication Middleware"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\r\n\r\nio.use((socket, next) => {\r\n    const token = socket.handshake.auth.token;\r\n    if (!token) return next(new Error('Authentication error: No token provided'));\r\n    jwt.verify(token, SECRET_KEY, (err, decoded) => {\r\n        if (err) return next(new Error('Authentication error: Invalid token'));\r\n        socket.user = decoded;\r\n        next();\r\n    })\r\n})\r\n \n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-handle-socket-connections",children:"Step 3: Handle Socket Connections"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"io.on('connection', (socket) => {\r\n  console.log(`User connected: ${socket.user.id}`);\r\n  \r\n  // Join user-specific room\r\n  socket.join(`user-${socket.user.id}`);\r\n  \r\n  socket.on('disconnect', () => {\r\n    console.log(`User disconnected: ${socket.user.id}`);\r\n  });\r\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"client-side-implementation",children:"Client-Side Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-create-socket-hook",children:"Step 1: Create Socket Hook"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { io } from 'socket.io-client';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useSocket = (token) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    const socketInstance = io('http://localhost:3001', {\r\n      auth: { token }\r\n    });\r\n\r\n    socketInstance.on('connect', () => {\r\n      setIsConnected(true);\r\n    });\r\n\r\n    setSocket(socketInstance);\r\n\r\n    return () => socketInstance.disconnect();\r\n  }, [token]);\r\n\r\n  return { socket, isConnected };\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-use-socket-in-components",children:"Step 2: Use Socket in Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const ChatComponent = () => {\r\n  const token = 'your-jwt-token'; // Get from auth system\r\n  const { socket, isConnected } = useSocket(token);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    socket.on('message', (data) => {\r\n      console.log('Received:', data);\r\n    });\r\n\r\n    return () => socket.off('message');\r\n  }, [socket]);\r\n\r\n  return (\r\n    <div>\r\n      <p>Status: {isConnected ? 'Connected' : 'Disconnected'}</p>\r\n    </div>\r\n  );\r\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Security"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Store JWT_SECRET in environment variables"}),"\n",(0,s.jsx)(n.li,{children:"Implement token expiration and renewal"}),"\n",(0,s.jsx)(n.li,{children:"Use HTTPS in production"}),"\n",(0,s.jsx)(n.li,{children:"Validate token payload"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement reconnection logic"}),"\n",(0,s.jsx)(n.li,{children:"Handle connection errors gracefully"}),"\n",(0,s.jsx)(n.li,{children:"Log security-related events"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement room-based broadcasting"}),"\n",(0,s.jsx)(n.li,{children:"Clean up event listeners"}),"\n",(0,s.jsx)(n.li,{children:"Handle disconnections properly"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Connection Issues"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Handle connection errors\r\nsocket.on('connect_error', (error) => {\r\n  console.error('Connection failed:', error.message);\r\n  // Implement retry logic\r\n});\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Token Expiration"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Check token expiration before emitting events\r\nconst isTokenValid = () => {\r\n  const token = socket.auth.token;\r\n  try {\r\n    jwt.verify(token, JWT_SECRET);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsx)(n.h3,{id:"room-based-authorization",children:"Room-Based Authorization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Server-side\r\nsocket.on('joinRoom', (roomId) => {\r\n  // Check if user has access to room\r\n  if (canAccessRoom(socket.user, roomId)) {\r\n    socket.join(roomId);\r\n    socket.emit('roomJoined', roomId);\r\n  }\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-events",children:"Custom Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Server-side\r\nio.to(`user-${userId}`).emit('notification', {\r\n  message: 'New message received'\r\n});\r\n\r\n// Client-side\r\nsocket.on('notification', (data) => {\r\n  showNotification(data.message);\r\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"recap",children:"Recap"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Set up server with Socket.IO and JWT authentication"}),"\n",(0,s.jsx)(n.li,{children:"Implement authentication middleware"}),"\n",(0,s.jsx)(n.li,{children:"Create client-side socket hook"}),"\n",(0,s.jsx)(n.li,{children:"Handle connections and events"}),"\n",(0,s.jsx)(n.li,{children:"Follow security best practices"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"sample-file",children:"Sample file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const express = require('express');\r\nconst http = require('http');\r\nconst { Server } = require('socket.io'); // Import the Server class from Socket.IO\r\nconst cors = require(\"cors\");\r\nconst app = express();\r\napp.use(cors({ origin: '*' }));\r\n \r\nconst server = http.createServer(app); // Create an HTTP server using the Express app\r\nconst io = new Server(server, { cors: \"*\" }); // Create a new Socket.IO server and attach it to the HTTP server\r\n \r\n// socket middleware to protect WS\r\nio.use((socket, next) => {\r\n    const token = socket.handshake.auth.token;\r\n    if (!token) return next(new Error('Authentication error: No token provided'));\r\n    jwt.verify(token, SECRET_KEY, (err, decoded) => {\r\n        if (err) return next(new Error('Authentication error: Invalid token'));\r\n        socket.user = decoded;\r\n        next();\r\n    })\r\n})\r\n \r\nio.on('connection', (socket) => { // Listen for new client connections\r\n    console.log(\"New Connection connected !\");\r\n \r\n    // Listen for user connection \r\n    socket.on(\"user connection\", (user_id) => {\r\n        socket.broadcast.emit(\"user connection\", user_id);\r\n    })\r\n \r\n    // Listening for Messages\r\n    socket.on(\"message\", ({ message, sender }) => {\r\n        console.log(\"Message recieved :: \" + message);\r\n \r\n        // send to all connections\r\n        io.emit(\"message\", msg);\r\n \r\n        // Send a response only to the sender\r\n        socket.emit('chat response', 'You sent: ' + msg);\r\n \r\n        // all clients except sender\r\n        socket.broadcast.emit(\"message\", { message, sender });\r\n    })\r\n \r\n    // Handling conncetion disconnection\r\n    socket.on('disconnect', () => {\r\n        console.log(\"user disconnected !\");\r\n    })\r\n \r\n    // Custom connection disconnect\r\n    socket.on('user disconnected', (user) => {\r\n        io.emit('user disconnected', `${user}`)\r\n    })\r\n \r\n    // error connectiong\r\n    socket.on(\"connect_error\", (err) => {\r\n        console.log(`connect_error due to ${err.message}`);\r\n    });\r\n});\r\nserver.listen(3000, () => {\r\n    console.log('server running at http://localhost:3000');\r\n});\r\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);