"use strict";(self.webpackChunkreadmes=self.webpackChunkreadmes||[]).push([[4031],{3894:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Frontend/Redux_Connect","title":"Redux Duck Pattern with Thunk - Complete Guide","description":"Comprehensive guide to implementing Redux Duck pattern with Thunk middleware for async actions, state management, and best practices.","source":"@site/docs/Frontend/12.Redux_Connect.md","sourceDirName":"Frontend","slug":"/Frontend/Redux_Connect","permalink":"/readmes/docs/Frontend/Redux_Connect","draft":false,"unlisted":false,"editUrl":"https://github.com/Sandeep-Petwal/readmes/tree/main/packages/create-docusaurus/templates/shared/docs/Frontend/12.Redux_Connect.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_label":"Redux Connect","title":"Redux Duck Pattern with Thunk - Complete Guide","description":"Comprehensive guide to implementing Redux Duck pattern with Thunk middleware for async actions, state management, and best practices."},"sidebar":"tutorialSidebar","previous":{"title":"File Upload","permalink":"/readmes/docs/Frontend/FileUpload"},"next":{"title":"Frontend Socket.io","permalink":"/readmes/docs/Frontend/socket.io"}}');var s=t(4848),a=t(8453);const i={sidebar_label:"Redux Connect",title:"Redux Duck Pattern with Thunk - Complete Guide",description:"Comprehensive guide to implementing Redux Duck pattern with Thunk middleware for async actions, state management, and best practices."},o="Redux Duck Pattern with Thunk - Complete Implementation Guide",c={},d=[{value:"What is Redux Duck Pattern?",id:"what-is-redux-duck-pattern",level:2},{value:"Basic Structure of a Duck File",id:"basic-structure-of-a-duck-file",level:2},{value:"Implementation Example",id:"implementation-example",level:2},{value:"1. Action Types",id:"1-action-types",level:3},{value:"2. Action Creators",id:"2-action-creators",level:3},{value:"3. Thunk (Async Action Creator)",id:"3-thunk-async-action-creator",level:3},{value:"4. Initial State",id:"4-initial-state",level:3},{value:"5. Reducer",id:"5-reducer",level:3},{value:"Setting Up Redux with Thunk (Example)",id:"setting-up-redux-with-thunk-example",level:2},{value:"Using Redux in Components",id:"using-redux-in-components",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Benefits of Duck Pattern",id:"benefits-of-duck-pattern",level:2},{value:"Using Connect Pattern with mapStateToProps and mapDispatchToProps",id:"using-connect-pattern-with-mapstatetoprops-and-mapdispatchtoprops",level:2},{value:"1. mapStateToProps",id:"1-mapstatetoprops",level:3},{value:"2. mapDispatchToProps",id:"2-mapdispatchtoprops",level:3},{value:"Example Component with Connect",id:"example-component-with-connect",level:3},{value:"Benefits of Connect Pattern",id:"benefits-of-connect-pattern",level:3},{value:"Best Practices for Connect",id:"best-practices-for-connect",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"redux-duck-pattern-with-thunk---complete-implementation-guide",children:"Redux Duck Pattern with Thunk - Complete Implementation Guide"})}),"\n",(0,s.jsx)(n.p,{children:"A comprehensive guide to implementing Redux Duck pattern with Thunk middleware for handling async operations and state management in React applications."}),"\n",(0,s.jsx)(n.h2,{id:"what-is-redux-duck-pattern",children:"What is Redux Duck Pattern?"}),"\n",(0,s.jsx)(n.p,{children:"The Redux Duck pattern is a way to organize Redux code by bundling related actions, action creators, and reducers into a single file. This pattern helps maintain modularity and makes it easier to manage related state logic in one place."}),"\n",(0,s.jsx)(n.h2,{id:"basic-structure-of-a-duck-file",children:"Basic Structure of a Duck File"}),"\n",(0,s.jsx)(n.p,{children:"A typical Redux Duck file contains:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Action Types"}),"\n",(0,s.jsx)(n.li,{children:"Action Creators"}),"\n",(0,s.jsx)(n.li,{children:"Thunk (Async Action Creators)"}),"\n",(0,s.jsx)(n.li,{children:"Initial State"}),"\n",(0,s.jsx)(n.li,{children:"Reducer"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-example",children:"Implementation Example"}),"\n",(0,s.jsx)(n.h3,{id:"1-action-types",children:"1. Action Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const FETCH_USER_REQUEST = 'user/FETCH_USER_REQUEST';\r\nconst FETCH_USER_SUCCESS = 'user/FETCH_USER_SUCCESS';\r\nconst FETCH_USER_FAILURE = 'user/FETCH_USER_FAILURE';\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Action types are constants that define the type of action"}),"\n",(0,s.jsxs)(n.li,{children:["Convention: ",(0,s.jsx)(n.code,{children:"domain/ACTION_TYPE"})]}),"\n",(0,s.jsx)(n.li,{children:"Helps prevent typos and enables better debugging"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-action-creators",children:"2. Action Creators"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const fetchUserRequest = () => ({\r\n  type: FETCH_USER_REQUEST,\r\n});\r\n\r\nconst fetchUserSuccess = (data) => ({\r\n  type: FETCH_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nconst fetchUserFailure = (error) => ({\r\n  type: FETCH_USER_FAILURE,\r\n  payload: error,\r\n});\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Pure functions that create action objects"}),"\n",(0,s.jsxs)(n.li,{children:["Each action creator returns an object with ",(0,s.jsx)(n.code,{children:"type"})," and optional ",(0,s.jsx)(n.code,{children:"payload"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-thunk-async-action-creator",children:"3. Thunk (Async Action Creator)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export const fetchUser = () => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchUserRequest());\r\n    try {\r\n      const response = await apiCall(); // Your API call here\r\n      dispatch(fetchUserSuccess(response.data));\r\n    } catch (error) {\r\n      dispatch(fetchUserFailure(error.message));\r\n    }\r\n  };\r\n};\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Thunks are middleware that allow action creators to return functions instead of action objects"}),"\n",(0,s.jsx)(n.li,{children:"Perfect for handling async operations"}),"\n",(0,s.jsx)(n.li,{children:"Can dispatch multiple actions during the async operation"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-initial-state",children:"4. Initial State"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const initialState = {\r\n  loading: false,\r\n  data: null,\r\n  error: null,\r\n};\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Defines the initial shape of your state"}),"\n",(0,s.jsx)(n.li,{children:"Should include all possible state properties"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"5-reducer",children:"5. Reducer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export default function userReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_USER_REQUEST:\r\n      return { ...state, loading: true, error: null };\r\n    case FETCH_USER_SUCCESS:\r\n      return { ...state, loading: false, data: action.payload };\r\n    case FETCH_USER_FAILURE:\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Pure function that takes current state and action, returns new state"}),"\n",(0,s.jsx)(n.li,{children:"Uses switch statement to handle different action types"}),"\n",(0,s.jsx)(n.li,{children:"Always returns a new state object (immutability)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-redux-with-thunk-example",children:"Setting Up Redux with Thunk (Example)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Install required dependencies:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install redux react-redux redux-thunk\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Create your store:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport {thunk} from 'redux-thunk';\r\nimport userReducer from './redux/user.duck';\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n  ....,\r\n});\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Wrap your app with Provider:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Provider } from 'react-redux';\r\nimport store from './store.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <YourApp />\r\n    </Provider>\r\n  );\r\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Sample Duck file:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// 1. Action Types\r\nconst FETCH_USER_REQUEST = 'user/FETCH_USER_REQUEST';\r\nconst FETCH_USER_SUCCESS = 'user/FETCH_USER_SUCCESS';\r\nconst FETCH_USER_FAILURE = 'user/FETCH_USER_FAILURE';\r\n\r\n// 2. Action Creators\r\nconst fetchUserRequest = () => ({\r\n  type: FETCH_USER_REQUEST,\r\n});\r\n\r\nconst fetchUserSuccess = (data) => ({\r\n  type: FETCH_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nconst fetchUserFailure = (error) => ({\r\n  type: FETCH_USER_FAILURE,\r\n  payload: error,\r\n});\r\n\r\n// 3. Thunk (Async Action Creator)\r\nexport const fetchUser = () => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchUserRequest());\r\n    try {\r\n      const response = await new Promise((resolve) =>\r\n        setTimeout(() => {\r\n          resolve({\r\n            data: {\r\n              id: 1,\r\n              name: 'Sanju',\r\n              message: 'User data loaded successfully!',\r\n            },\r\n          });\r\n        }, 1000)\r\n      );\r\n\r\n      if (response && response.data) {\r\n        dispatch(fetchUserSuccess(response.data));\r\n      } else {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n    } catch (error) {\r\n      dispatch(fetchUserFailure(error.message || 'Unexpected error occurred'));\r\n    }\r\n  };\r\n};\r\n\r\n// 4. Initial State\r\nconst initialState = {\r\n  loading: false,\r\n  data: null,\r\n  error: null,\r\n};\r\n\r\n// 5. Reducer\r\nexport default function userReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_USER_REQUEST:\r\n      return { ...state,data: null, loading: true, error: null };\r\n    case FETCH_USER_SUCCESS:\r\n      return { ...state, loading: false, data: action.payload };\r\n    case FETCH_USER_FAILURE:\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"using-redux-in-components",children:"Using Redux in Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchUser } from './redux/user.duck';\r\n\r\nfunction UserComponent() {\r\n  const dispatch = useDispatch();\r\n  const { loading, data, error } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUser());\r\n  }, [dispatch]);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n  if (!data) return <div>No user data</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>{data.name}</h1>\r\n      <p>{data.message}</p>\r\n    </div>\r\n  );\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Naming Convention"}),": Use ",(0,s.jsx)(n.code,{children:"domain/ACTION_TYPE"})," for action types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Immutable Updates"}),": Always return new state objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Include error states in your initial state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Loading States"}),": Track loading states for better UX"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Action Creators"}),": Keep them pure and simple"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Thunks"}),": Handle async operations and side effects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Selectors"}),": Use selectors for complex state calculations"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"benefits-of-duck-pattern",children:"Benefits of Duck Pattern"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Modular and maintainable code"}),"\n",(0,s.jsx)(n.li,{children:"Easier to understand related logic"}),"\n",(0,s.jsx)(n.li,{children:"Better code organization"}),"\n",(0,s.jsx)(n.li,{children:"Simplified testing"}),"\n",(0,s.jsx)(n.li,{children:"Reduced boilerplate"}),"\n",(0,s.jsx)(n.li,{children:"Clear separation of concerns"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Remember to follow these patterns consistently across your application for better maintainability and scalability."}),"\n",(0,s.jsx)(n.h2,{id:"using-connect-pattern-with-mapstatetoprops-and-mapdispatchtoprops",children:"Using Connect Pattern with mapStateToProps and mapDispatchToProps"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"connect"})," function from ",(0,s.jsx)(n.code,{children:"react-redux"})," is a higher-order component that connects a React component to the Redux store. It provides two main functions:"]}),"\n",(0,s.jsx)(n.h3,{id:"1-mapstatetoprops",children:"1. mapStateToProps"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const mapStateToProps = (state: RootState) => ({\r\n  todos: state.todo.todos\r\n});\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Maps Redux state to component props"}),"\n",(0,s.jsx)(n.li,{children:"Called every time the store state changes"}),"\n",(0,s.jsx)(n.li,{children:"Returns an object that will be merged with component props"}),"\n",(0,s.jsx)(n.li,{children:"First parameter is the entire Redux state"}),"\n",(0,s.jsx)(n.li,{children:"Second parameter (optional) is the component's own props"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-mapdispatchtoprops",children:"2. mapDispatchToProps"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Object shorthand syntax\r\nconst mapDispatchToProps = {\r\n  addTodo,\r\n  toggleTodo,\r\n  deleteTodo\r\n};\r\n\r\n// OR Function syntax\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addTodo: (text) => dispatch(addTodo(text)),\r\n  toggleTodo: (id) => dispatch(toggleTodo(id)),\r\n  deleteTodo: (id) => dispatch(deleteTodo(id))\r\n});\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Maps dispatch functions to component props"}),"\n",(0,s.jsx)(n.li,{children:"Can be an object of action creators (shorthand)"}),"\n",(0,s.jsx)(n.li,{children:"Or a function that returns an object of dispatch functions"}),"\n",(0,s.jsx)(n.li,{children:"First parameter is the dispatch function"}),"\n",(0,s.jsx)(n.li,{children:"Second parameter (optional) is the component's own props"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-component-with-connect",children:"Example Component with Connect"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { connect } from 'react-redux';\r\nimport { addTodo, toggleTodo, deleteTodo } from './todo.duck';\r\n\r\ninterface TodoPageProps {\r\n  todos: Todo[];\r\n  addTodo: (text: string) => void;\r\n  toggleTodo: (id: number) => void;\r\n  deleteTodo: (id: number) => void;\r\n}\r\n\r\nconst TodoPage: React.FC<TodoPageProps> = ({ todos, addTodo, toggleTodo, deleteTodo }) => {\r\n  // Component implementation\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  todos: state.todo.todos\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addTodo,\r\n  toggleTodo,\r\n  deleteTodo\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoPage);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"benefits-of-connect-pattern",children:"Benefits of Connect Pattern"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Clear separation between presentational and container components"}),"\n",(0,s.jsx)(n.li,{children:"Automatic re-rendering when connected state changes"}),"\n",(0,s.jsx)(n.li,{children:"Type safety with TypeScript"}),"\n",(0,s.jsx)(n.li,{children:"Easy testing of component logic"}),"\n",(0,s.jsx)(n.li,{children:"Reusable action creators"}),"\n",(0,s.jsx)(n.li,{children:"Centralized state management"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"best-practices-for-connect",children:"Best Practices for Connect"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Use TypeScript interfaces for props"}),"\n",(0,s.jsx)(n.li,{children:"Keep mapStateToProps simple and focused"}),"\n",(0,s.jsx)(n.li,{children:"Use object shorthand for mapDispatchToProps when possible"}),"\n",(0,s.jsx)(n.li,{children:"Memoize selectors for complex state transformations"}),"\n",(0,s.jsx)(n.li,{children:"Split large components into presentational and container components"}),"\n",(0,s.jsx)(n.li,{children:"Use proper typing for the Redux state"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);