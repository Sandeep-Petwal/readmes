"use strict";(self.webpackChunkreadmes=self.webpackChunkreadmes||[]).push([[3822],{114:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Frontend/FileUpload","title":"React File Upload - Complete Implementation Guide","description":"Comprehensive guide to implementing file upload functionality in React with validation, preview, and FormData handling for images and PDFs.","source":"@site/docs/Frontend/11.FileUpload.md","sourceDirName":"Frontend","slug":"/Frontend/FileUpload","permalink":"/readmes/docs/Frontend/FileUpload","draft":false,"unlisted":false,"editUrl":"https://github.com/Sandeep-Petwal/readmes/tree/main/packages/create-docusaurus/templates/shared/docs/Frontend/11.FileUpload.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_label":"File Upload","title":"React File Upload - Complete Implementation Guide","description":"Comprehensive guide to implementing file upload functionality in React with validation, preview, and FormData handling for images and PDFs."},"sidebar":"tutorialSidebar","previous":{"title":"Axios Setup","permalink":"/readmes/docs/Frontend/axios"},"next":{"title":"Redux Connect","permalink":"/readmes/docs/Frontend/Redux_Connect"}}');var i=n(4848),a=n(8453);const l={sidebar_label:"File Upload",title:"React File Upload - Complete Implementation Guide",description:"Comprehensive guide to implementing file upload functionality in React with validation, preview, and FormData handling for images and PDFs."},o="React File Upload - Complete Implementation Guide",s={},d=[{value:"File Upload Component with Validation",id:"file-upload-component-with-validation",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Usage",id:"usage",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"react-file-upload---complete-implementation-guide",children:"React File Upload - Complete Implementation Guide"})}),"\n",(0,i.jsx)(r.p,{children:"A comprehensive guide to implementing file upload functionality in React applications with validation, preview, and proper error handling."}),"\n",(0,i.jsx)(r.h2,{id:"file-upload-component-with-validation",children:"File Upload Component with Validation"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"import React, { useState } from 'react';\r\n\r\nconst FileUploadForm = () => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [selectedPdf, setSelectedPdf] = useState(null);\r\n  const [imagePreview, setImagePreview] = useState(null);\r\n  const [pdfPreview, setPdfPreview] = useState(null);\r\n  const [error, setError] = useState({ image: '', pdf: '' });\r\n\r\n  // Constants for file validation\r\n  const MAX_IMAGE_SIZE = 1 * 1024 * 1024; // 1MB in bytes\r\n  const MAX_PDF_SIZE = 500 * 1024; // 500KB in bytes\r\n  const ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png'];\r\n  const ALLOWED_PDF_TYPE = 'application/pdf';\r\n\r\n  // Validate image file\r\n  const validateImage = (file) => {\r\n    // Reset error\r\n    setError(prev => ({ ...prev, image: '' }));\r\n\r\n    // Check file type\r\n    if (!ALLOWED_IMAGE_TYPES.includes(file.type)) {\r\n      setError(prev => ({ \r\n        ...prev, \r\n        image: 'Only JPEG and PNG files are allowed' \r\n      }));\r\n      return false;\r\n    }\r\n\r\n    // Check file size\r\n    if (file.size > MAX_IMAGE_SIZE) {\r\n      setError(prev => ({ \r\n        ...prev, \r\n        image: 'Image size should be less than 1MB' \r\n      }));\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  // Validate PDF file\r\n  const validatePdf = (file) => {\r\n    // Reset error\r\n    setError(prev => ({ ...prev, pdf: '' }));\r\n\r\n    // Check file type\r\n    if (file.type !== ALLOWED_PDF_TYPE) {\r\n      setError(prev => ({ \r\n        ...prev, \r\n        pdf: 'Only PDF files are allowed' \r\n      }));\r\n      return false;\r\n    }\r\n\r\n    // Check file size\r\n    if (file.size > MAX_PDF_SIZE) {\r\n      setError(prev => ({ \r\n        ...prev, \r\n        pdf: 'PDF size should be less than 500KB' \r\n      }));\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  // Format file size to readable format\r\n  const formatFileSize = (bytes) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  // Handle image upload\r\n  const handleImageChange = (event) => {\r\n    const file = event.target.files[0];\r\n    \r\n    if (file) {\r\n      if (validateImage(file)) {\r\n        setSelectedImage(file);\r\n        \r\n        // Create preview URL for image\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          setImagePreview(reader.result);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    }\r\n    // Reset input value if validation fails\r\n    if (error.image) {\r\n      event.target.value = null;\r\n    }\r\n  };\r\n\r\n  // Handle PDF upload\r\n  const handlePdfChange = (event) => {\r\n    const file = event.target.files[0];\r\n    \r\n    if (file) {\r\n      if (validatePdf(file)) {\r\n        setSelectedPdf(file);\r\n        \r\n        // Create preview URL for PDF\r\n        const url = URL.createObjectURL(file);\r\n        setPdfPreview(url);\r\n      }\r\n    }\r\n    // Reset input value if validation fails\r\n    if (error.pdf) {\r\n      event.target.value = null;\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // Final validation check before submission\r\n    if (error.image || error.pdf) {\r\n      alert('Please fix the errors before submitting');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    if (selectedImage) formData.append('image', selectedImage);\r\n    if (selectedPdf) formData.append('pdf', selectedPdf);\r\n\r\n    try {\r\n      const response = await fetch('your-upload-api-endpoint', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('Files uploaded successfully!');\r\n        // Reset form\r\n        setSelectedImage(null);\r\n        setSelectedPdf(null);\r\n        setImagePreview(null);\r\n        setPdfPreview(null);\r\n        setError({ image: '', pdf: '' });\r\n      } else {\r\n        throw new Error('Upload failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading files:', error);\r\n      alert('Failed to upload files');\r\n    }\r\n  };\r\n\r\n  // Cleanup preview URLs\r\n  React.useEffect(() => {\r\n    return () => {\r\n      if (pdfPreview) {\r\n        URL.revokeObjectURL(pdfPreview);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"max-w-2xl mx-auto p-6\">\r\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n        {/* Image Upload Section */}\r\n        <div className=\"space-y-2\">\r\n          <label className=\"block text-sm font-medium text-gray-700\">\r\n            Upload Image (PNG/JPEG, max 1MB)\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".png,.jpg,.jpeg\"\r\n            onChange={handleImageChange}\r\n            className=\"block w-full text-sm text-gray-500\r\n              file:mr-4 file:py-2 file:px-4\r\n              file:rounded-md file:border-0\r\n              file:text-sm file:font-semibold\r\n              file:bg-blue-50 file:text-blue-700\r\n              hover:file:bg-blue-100\"\r\n          />\r\n          {error.image && (\r\n            <p className=\"text-red-500 text-sm mt-1\">{error.image}</p>\r\n          )}\r\n          {selectedImage && (\r\n            <p className=\"text-sm text-gray-500\">\r\n              Selected file size: {formatFileSize(selectedImage.size)}\r\n            </p>\r\n          )}\r\n          {imagePreview && (\r\n            <div className=\"mt-2\">\r\n              <img\r\n                src={imagePreview}\r\n                alt=\"Preview\"\r\n                className=\"max-w-xs h-auto rounded-lg shadow-md\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* PDF Upload Section */}\r\n        <div className=\"space-y-2\">\r\n          <label className=\"block text-sm font-medium text-gray-700\">\r\n            Upload PDF (max 500KB)\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".pdf\"\r\n            onChange={handlePdfChange}\r\n            className=\"block w-full text-sm text-gray-500\r\n              file:mr-4 file:py-2 file:px-4\r\n              file:rounded-md file:border-0\r\n              file:text-sm file:font-semibold\r\n              file:bg-green-50 file:text-green-700\r\n              hover:file:bg-green-100\"\r\n          />\r\n          {error.pdf && (\r\n            <p className=\"text-red-500 text-sm mt-1\">{error.pdf}</p>\r\n          )}\r\n          {selectedPdf && (\r\n            <p className=\"text-sm text-gray-500\">\r\n              Selected file size: {formatFileSize(selectedPdf.size)}\r\n            </p>\r\n          )}\r\n          {pdfPreview && (\r\n            <div className=\"mt-2\">\r\n              <iframe\r\n                src={pdfPreview}\r\n                className=\"w-full h-64 border rounded-lg\"\r\n                title=\"PDF Preview\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Submit Button */}\r\n        <button\r\n          type=\"submit\"\r\n          className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors\"\r\n        >\r\n          Upload Files\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploadForm;\n"})}),"\n",(0,i.jsx)(r.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"File Validation"}),": Type and size validation for both images and PDFs"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Preview Generation"}),": Image and PDF preview functionality"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Error Handling"}),": Comprehensive error messages and validation"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"FormData Usage"}),": Proper FormData handling for file uploads"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Cleanup"}),": Memory cleanup for preview URLs"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Responsive Design"}),": Tailwind CSS styling for modern UI"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Import the component into your React application"}),"\n",(0,i.jsxs)(r.li,{children:["Configure the upload endpoint in the ",(0,i.jsx)(r.code,{children:"handleSubmit"})," function"]}),"\n",(0,i.jsx)(r.li,{children:"Customize validation rules as needed"}),"\n",(0,i.jsx)(r.li,{children:"Style the component according to your design system"}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>o});var t=n(6540);const i={},a=t.createContext(i);function l(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);